// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AddAction } from "./add_action_reducer.ts";
export { AddAction };
import { AddUser } from "./add_user_reducer.ts";
export { AddUser };
import { AddUserToQueue } from "./add_user_to_queue_reducer.ts";
export { AddUserToQueue };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { RemoveAction } from "./remove_action_reducer.ts";
export { RemoveAction };
import { RemoveUserFromQueue } from "./remove_user_from_queue_reducer.ts";
export { RemoveUserFromQueue };
import { UpdateUserName } from "./update_user_name_reducer.ts";
export { UpdateUserName };

// Import and reexport all table handle types
import { ActionsTableHandle } from "./actions_table.ts";
export { ActionsTableHandle };
import { QueueTableHandle } from "./queue_table.ts";
export { QueueTableHandle };
import { UsersTableHandle } from "./users_table.ts";
export { UsersTableHandle };

// Import and reexport all types
import { Action } from "./action_type.ts";
export { Action };
import { Queue } from "./queue_type.ts";
export { Queue };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    Actions: {
      tableName: "Actions",
      rowType: Action.getTypeScriptAlgebraicType(),
    },
    Queue: {
      tableName: "Queue",
      rowType: Queue.getTypeScriptAlgebraicType(),
      primaryKey: "userIdentity",
      primaryKeyInfo: {
        colName: "userIdentity",
        colType: (Queue.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    Users: {
      tableName: "Users",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    AddAction: {
      reducerName: "AddAction",
      argsType: AddAction.getTypeScriptAlgebraicType(),
    },
    AddUser: {
      reducerName: "AddUser",
      argsType: AddUser.getTypeScriptAlgebraicType(),
    },
    AddUserToQueue: {
      reducerName: "AddUserToQueue",
      argsType: AddUserToQueue.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    RemoveAction: {
      reducerName: "RemoveAction",
      argsType: RemoveAction.getTypeScriptAlgebraicType(),
    },
    RemoveUserFromQueue: {
      reducerName: "RemoveUserFromQueue",
      argsType: RemoveUserFromQueue.getTypeScriptAlgebraicType(),
    },
    UpdateUserName: {
      reducerName: "UpdateUserName",
      argsType: UpdateUserName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddAction", args: AddAction }
| { name: "AddUser", args: AddUser }
| { name: "AddUserToQueue", args: AddUserToQueue }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "RemoveAction", args: RemoveAction }
| { name: "RemoveUserFromQueue", args: RemoveUserFromQueue }
| { name: "UpdateUserName", args: UpdateUserName }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addAction(text: string) {
    const __args = { text };
    let __writer = new __BinaryWriter(1024);
    AddAction.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddAction", __argsBuffer, this.setCallReducerFlags.addActionFlags);
  }

  onAddAction(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("AddAction", callback);
  }

  removeOnAddAction(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("AddAction", callback);
  }

  addUser(name: string, age: number) {
    const __args = { name, age };
    let __writer = new __BinaryWriter(1024);
    AddUser.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddUser", __argsBuffer, this.setCallReducerFlags.addUserFlags);
  }

  onAddUser(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.onReducer("AddUser", callback);
  }

  removeOnAddUser(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.offReducer("AddUser", callback);
  }

  addUserToQueue(userIdentity: __Identity) {
    const __args = { userIdentity };
    let __writer = new __BinaryWriter(1024);
    AddUserToQueue.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddUserToQueue", __argsBuffer, this.setCallReducerFlags.addUserToQueueFlags);
  }

  onAddUserToQueue(callback: (ctx: ReducerEventContext, userIdentity: __Identity) => void) {
    this.connection.onReducer("AddUserToQueue", callback);
  }

  removeOnAddUserToQueue(callback: (ctx: ReducerEventContext, userIdentity: __Identity) => void) {
    this.connection.offReducer("AddUserToQueue", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  removeAction(action: Action) {
    const __args = { action };
    let __writer = new __BinaryWriter(1024);
    RemoveAction.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveAction", __argsBuffer, this.setCallReducerFlags.removeActionFlags);
  }

  onRemoveAction(callback: (ctx: ReducerEventContext, action: Action) => void) {
    this.connection.onReducer("RemoveAction", callback);
  }

  removeOnRemoveAction(callback: (ctx: ReducerEventContext, action: Action) => void) {
    this.connection.offReducer("RemoveAction", callback);
  }

  removeUserFromQueue(userIdentity: __Identity) {
    const __args = { userIdentity };
    let __writer = new __BinaryWriter(1024);
    RemoveUserFromQueue.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveUserFromQueue", __argsBuffer, this.setCallReducerFlags.removeUserFromQueueFlags);
  }

  onRemoveUserFromQueue(callback: (ctx: ReducerEventContext, userIdentity: __Identity) => void) {
    this.connection.onReducer("RemoveUserFromQueue", callback);
  }

  removeOnRemoveUserFromQueue(callback: (ctx: ReducerEventContext, userIdentity: __Identity) => void) {
    this.connection.offReducer("RemoveUserFromQueue", callback);
  }

  updateUserName(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    UpdateUserName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateUserName", __argsBuffer, this.setCallReducerFlags.updateUserNameFlags);
  }

  onUpdateUserName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("UpdateUserName", callback);
  }

  removeOnUpdateUserName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("UpdateUserName", callback);
  }

}

export class SetReducerFlags {
  addActionFlags: __CallReducerFlags = 'FullUpdate';
  addAction(flags: __CallReducerFlags) {
    this.addActionFlags = flags;
  }

  addUserFlags: __CallReducerFlags = 'FullUpdate';
  addUser(flags: __CallReducerFlags) {
    this.addUserFlags = flags;
  }

  addUserToQueueFlags: __CallReducerFlags = 'FullUpdate';
  addUserToQueue(flags: __CallReducerFlags) {
    this.addUserToQueueFlags = flags;
  }

  removeActionFlags: __CallReducerFlags = 'FullUpdate';
  removeAction(flags: __CallReducerFlags) {
    this.removeActionFlags = flags;
  }

  removeUserFromQueueFlags: __CallReducerFlags = 'FullUpdate';
  removeUserFromQueue(flags: __CallReducerFlags) {
    this.removeUserFromQueueFlags = flags;
  }

  updateUserNameFlags: __CallReducerFlags = 'FullUpdate';
  updateUserName(flags: __CallReducerFlags) {
    this.updateUserNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get actions(): ActionsTableHandle {
    // clientCache is a private property
    return new ActionsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Action>(REMOTE_MODULE.tables.Actions));
  }

  get queue(): QueueTableHandle {
    // clientCache is a private property
    return new QueueTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Queue>(REMOTE_MODULE.tables.Queue));
  }

  get users(): UsersTableHandle {
    // clientCache is a private property
    return new UsersTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.Users));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
